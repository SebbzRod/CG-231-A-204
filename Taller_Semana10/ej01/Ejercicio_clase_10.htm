<!DOCTYPE html>
<html lang="en-GB">

<head>
  <meta charset="utf-8" />
  <title>Grupo de cubos</title>
  <style>
    body {
      margin: 0;
    }
  </style>
</head>

<body>
  <script type="module">
    import * as THREE from 'https://sebastiann16.github.io/CompG/three.module.js';
    import { OrbitControls } from 'https://sebastiann16.github.io/CompG/OrbitControls.js';
    var WIDTH = window.innerWidth;
    var HEIGHT = window.innerHeight;

    var renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(WIDTH, HEIGHT);
    renderer.setClearColor(0xDDDDDD, 1);
    document.body.appendChild(renderer.domElement);
	
	var size = 10;
	var arrowSize = 2;
	var divisions = 10;
	var origin = new THREE.Vector3( 0, 0, 0 );
	var x = new THREE.Vector3( 1, 0, 0 );
	var y = new THREE.Vector3( 0, 1, 0 );
	var z = new THREE.Vector3( 0, 0, 1 );
	var color2 = new THREE.Color( 0x333333 );  /// 0x333333
	var colorR = new THREE.Color( 0xAA0000 );
	var colorG = new THREE.Color( 0x00AA00 );
	var colorB = new THREE.Color( 0x0000AA );

	//Create a guide (guilla)
	var gridHelperXZ = new THREE.GridHelper( size, divisions, color2, color2);

	//Create axes
	var arrowX = new THREE.ArrowHelper( x, origin, arrowSize, colorR );
	var arrowY = new THREE.ArrowHelper( y, origin, arrowSize, colorG );
	var arrowZ = new THREE.ArrowHelper( z, origin, arrowSize, colorB );

	var scene = new THREE.Scene();

    var camera = new THREE.PerspectiveCamera(70, WIDTH / HEIGHT);
    camera.position.z = 5;
    camera.position.y = 5;
    camera.position.x = 5;
    scene.add(camera);
    const light = new THREE.AmbientLight(0x404040, 5);
    scene.add(light);

	var lado = 1;
	var base = lado;
	var altura = lado;

	const dimensiones = [[lado, base, altura], [lado/2,  base/2, altura/2], [lado/4, base/4, altura/4]];		
	const color = [0xff0000, 0x00ff00, 0x0000ff];
	const material = [new THREE.MeshBasicMaterial({ color: color[0]}), new THREE.MeshNormalMaterial({ color: color[1]}), new THREE.MeshMatcapMaterial({ color: color[2]})];
			
	const geometry = [];
	for ( let i = 0; i < 3; i++) {

		geometry.push(new THREE.BoxGeometry(...dimensiones[i]));

	}

	const cubo = [];
	for ( let i = 0; i < 3; i++) {
	
		cubo.push(new THREE.Mesh(geometry[i], material[i]));

	}
	
	for (let i = 0; i < 3; i++) {
				
		scene.add (cubo[i]);
	}
		
	for (let i = 0; i < 3; i++) {
				
		cubo[i].position.x  = lado/2;
		cubo[i].position.y = lado/2;
		cubo[i].position.z = lado/2;
	}

	cubo[1].position.y = 5*lado/4;
	cubo[2].position.y = 13*lado/8;

	scene.add(arrowX, arrowY, arrowZ, gridHelperXZ);

    const controls = new OrbitControls(camera, renderer.domElement);

    function animate() {

      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera)
    }
    animate();
  </script>
</body>

</html>